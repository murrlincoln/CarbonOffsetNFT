{"version":3,"sources":["components/CallViewMethodButton.module.css","components/ConnectToMetamaskButton.module.css","components/CallViewMethodButton.js","components/ConnectToMetamaskButton.js","components/Pending.js","App.js","hooks/Connection.js","index.js"],"names":["module","exports","CallViewMethodButton","props","className","styles","row","type","onClick","onUpdate","name","value","length","ConnectToMetamaskButton","connectToMetamask","a","window","ethereum","request","method","Pending","hasPendingTransactions","provider","contract","contractAddress","network","ethers","providers","getNetwork","updateSupply","getSupply","setInterval","Web3Provider","Contract","contractAbi","getSigner","getDefaultProvider","App","useState","isConnected","setIsConnected","address","setAddress","handler","accounts","connected","then","useEffect","addListener","removeListener","useConnection","supply","setSupply","balance","setBalance","on","to","tokenID","console","log","alert","totalSupply","toString","getBalance","balanceOf","mintNFT","valueStr","prompt","utils","parseEther","style","color","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,IAAM,kCAAkC,MAAQ,sC,wyECAlED,EAAOC,QAAU,CAAC,iBAAiB,kD,0NCCpB,SAASC,EAAqBC,GAC3C,OACE,sBAAKC,UAAWC,IAAOC,IAAvB,UACE,wBAAQC,KAAK,SAASC,QAASL,EAAMM,SAArC,SACGN,EAAMO,OAERP,EAAMQ,OAASR,EAAMQ,MAAMC,OAAS,GAAK,qBAAKR,UAAWC,IAAOM,MAAvB,SAA+BR,EAAMQ,W,qBCNtE,SAASE,IAEtB,IAAMC,EAAiB,uCAAG,sBAAAC,EAAA,sEAClBC,OAAOC,SAASC,QAAQ,CAAEC,OAAQ,wBADhB,2CAAH,qDAIvB,OACE,wBAAQZ,KAAK,SAASH,UAAWC,IAAO,kBAAmBG,QAASM,EAApE,iCCDWM,I,QCGf,IAGIC,EAMAC,EACAC,EAVEC,EAAkB,6CAKpBC,EAAUC,IAAOC,UAAUC,WAAW,SAyB1C,SAASC,EAAaC,GACpBC,YAAYD,EAAW,KAnBrBd,OAAOC,UACTK,EAAW,IAAII,IAAOC,UAAUK,aAAahB,OAAOC,UAEpDM,EAAW,IAAIG,IAAOO,SACpBT,EACAU,EACAZ,EAASa,UAAU,MAGrBb,EAAW,IAAII,IAAOC,UAAUS,mBAAmBX,GACnDF,EAAW,IAAIG,IAAOO,SACpBT,EACAU,IAiIWG,MAvHf,WAGE,MC9Ca,WACb,MAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGMC,EAAU,SAACC,GACf,IAAMC,EAAYD,GAAYA,EAAShC,OAAS,EAChD4B,EAAeK,GAEbH,EADEG,EACSD,EAAS,GAET,OAyBf,OApBI5B,OAAOC,UACTD,OAAOC,SACNC,QAAQ,CACPC,OAAQ,iBAET2B,KAAKH,GAKRI,qBAAU,WAIR,OAHI/B,OAAOC,UACXD,OAAOC,SAAS+B,YAAY,kBAAmBL,GAExC,WACD3B,OAAOC,UACXD,OAAOC,SAASgC,eAAe,kBAAmBN,MAEnD,IAEI,CAAEJ,cAAaE,WDUWS,GAAzBX,EAAR,EAAQA,YAAaE,EAArB,EAAqBA,QAGrB,EAA4BH,mBAAS,IAArC,mBAAOa,EAAP,KAAeC,EAAf,KACA,EAA8Bd,mBAAS,IAAvC,mBAAOe,EAAP,KAAgBC,EAAhB,KAGAP,qBAAU,WACJR,GACEA,GACFhB,EAASgC,GAAG,QAAQ,SAACC,EAAIC,GACvBC,QAAQC,IAAI,OAAQH,EAAIC,GACxBG,MAAM,0BACNvC,GAAyB,OAI9B,CAACkB,EAAaE,IAGjB,IAAMX,EAAS,uCAAG,sBAAAf,EAAA,0DACZwB,EADY,4BAEda,EAFc,SAEG7B,EAASsC,cAFZ,mBAE2BC,YAF3B,yDAAH,qDAOTC,EAAU,uCAAG,sBAAAhD,EAAA,0DACbwB,EADa,4BAEfe,EAFe,SAEG/B,EAASyC,UAAUvB,GAFtB,mBAEgCqB,YAFhC,yDAAH,qDAOVG,EAAO,uCAAG,4BAAAlD,EAAA,yDAMG,QALXmD,EAAWC,OACf,qCACA,2DAHY,uBAQZ9C,GAAyB,EARb,SASNE,EAAS0C,QAAS,iFAAmF,CAEzGtD,MAAOe,IAAO0C,MAAMC,WAAWH,KAXrB,2CAAH,qDAsBb,OACE,iCACE,sBAAK9D,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,uCAAU+C,EAAV,iDACCtB,EAAaC,GAEZd,OAAOC,SAQP,qBAAKb,UAAU,YAAf,SACGmC,EACC,qCACE,sEACA,gEAAmCE,EAAnC,OACA,mBAAG6B,MAAO,CAAEC,MAAO,OAAnB,uEACA,cAACrE,EAAD,CACEQ,KAAK,eACLD,SAAUsD,EACVpD,MAAO0C,IAGT,wBAAQ9C,KAAK,SAASC,QAASyD,EAA/B,2CAIC5C,EACC,mCACE,oBAAIjB,UAAU,UAAd,0BACM,4CAGZ,cAACS,EAAD,MA7BJ,mCACE,oEACsC,IACpC,mBAAG2D,KAAK,uBAAR,sBAFF,4BAmCN,sBAAKpE,UAAU,aAAf,UACE,oBAAIA,UAAU,MAAd,wCACA,oBAAIA,UAAU,WAAd,mCACA,mBAAGA,UAAU,SAAb,keACA,oBAAIA,UAAU,WAAd,+BACA,oBAAGA,UAAU,SAAb,8GAAuH,mBAAGoE,KAAK,+BAAR,yBAAvH,0WACA,oBAAIpE,UAAU,WAAd,sCACA,oBAAGA,UAAU,SAAb,sPAA+P,uBAA/P,wGACA,oBAAIA,UAAU,WAAd,gEACA,oBAAGA,UAAU,SAAb,6CAAsD,mBAAGoE,KAAK,iDAAR,kBAAtD,cExJRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.05423ef5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"CallViewMethodButton_row__29BKM\",\"value\":\"CallViewMethodButton_value__3QYa1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"connect-button\":\"ConnectToMetamaskButton_connect-button__4LKlJ\"};","import styles from './CallViewMethodButton.module.css';\r\n\r\nexport default function CallViewMethodButton(props) {\r\n  return (\r\n    <div className={styles.row}>\r\n      <button type=\"button\" onClick={props.onUpdate}>\r\n        {props.name}\r\n      </button>\r\n      {props.value && props.value.length > 0 && <div className={styles.value}>{props.value}</div>}\r\n    </div>\r\n  );\r\n}\r\n","import styles from './ConnectToMetamaskButton.module.css';\r\n\r\nexport default function ConnectToMetamaskButton() {\r\n  // Open MetaMask confirmation popup\r\n  const connectToMetamask = async () => {\r\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n  };\r\n\r\n  return (\r\n    <button type=\"button\" className={styles['connect-button']} onClick={connectToMetamask}>\r\n      Connect to MetaMask\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Pending() {\r\n    return (\r\n        <h1>Pending...</h1>\r\n    )\r\n}\r\n\r\nexport default Pending","import { ethers } from 'ethers';\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport CallViewMethodButton from './components/CallViewMethodButton';\r\nimport ConnectToMetamaskButton from './components/ConnectToMetamaskButton';\r\nimport Pending from \"./components/Pending\";\r\n// Update contract.abi.json to contain your contract's ABI\r\nimport contractAbi from './contract.abi.json';\r\nimport useConnection from './hooks/Connection';\r\n\r\n// Modify this to be your contract's address\r\nconst contractAddress = '0xE38F44544D868D0cECc3fc197555A3b81Fc36098';\r\n\r\n//determines if there is a current pending transaction\r\nlet hasPendingTransactions;\r\n\r\nvar network = ethers.providers.getNetwork(\"kovan\")\r\n\r\n\r\n//provider depends on whether or not metamask is installed\r\nlet provider;\r\nlet contract;\r\n\r\nif (window.ethereum) {\r\n  provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n  contract = new ethers.Contract(\r\n    contractAddress,\r\n    contractAbi,\r\n    provider.getSigner(0),\r\n  );\r\n} else {\r\n  provider = new ethers.providers.getDefaultProvider(network);\r\n  contract = new ethers.Contract(\r\n    contractAddress,\r\n    contractAbi,\r\n  );\r\n}\r\n\r\n\r\n\r\nfunction updateSupply(getSupply) {\r\n  setInterval(getSupply, 5000)\r\n}\r\n\r\nfunction App() {\r\n  // Custom React hook that listens to MetaMask events\r\n  // Check it out in ./hooks/Connection.js\r\n  const { isConnected, address } = useConnection();\r\n\r\n  // A few state variables just to demonstrate different functionality of the ethers.js library\r\n  const [supply, setSupply] = useState('');\r\n  const [balance, setBalance] = useState('');\r\n\r\n\r\n  useEffect(() => {\r\n    if (isConnected) {\r\n      if (isConnected) {\r\n        contract.on('Mint', (to, tokenID) => {\r\n          console.log('Mint', to, tokenID)\r\n          alert('Transaction completed!')\r\n          hasPendingTransactions = false;\r\n        })\r\n      }\r\n    }\r\n  }, [isConnected, address]);\r\n\r\n  // Read-only method call\r\n  const getSupply = async () => {\r\n    if (isConnected) {\r\n      setSupply((await contract.totalSupply()).toString());\r\n    }\r\n  };\r\n\r\n  // Read-only method call, returns a BigNumber\r\n  const getBalance = async () => {\r\n    if (isConnected) {\r\n      setBalance((await contract.balanceOf(address)).toString());\r\n    }\r\n  };\r\n\r\n  // Write method with attached ETH\r\n  const mintNFT = async () => {\r\n    const valueStr = prompt(\r\n      'How much would you like to offset?',\r\n      'Value in ether (Must be greater than 0.00019662 ether)',\r\n    );\r\n\r\n    if (valueStr !== null) {\r\n      // This promise will reject if the user cancels the transaction\r\n      hasPendingTransactions = true;\r\n      await contract.mintNFT(('https://raw.githubusercontent.com/murrlincoln/CarbonOffsetNFT/main/NFTURI.json'), {\r\n        // Attach additional value to this transaction\r\n        value: ethers.utils.parseEther(valueStr),\r\n      });\r\n\r\n\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"div\">\r\n        <h1 className=\"title\">Carbon Neutralized</h1>\r\n        <h3>Join {supply} others on the journey to carbon neutrality</h3>\r\n        {updateSupply(getSupply)}\r\n\r\n        {!window.ethereum ? (\r\n          <>\r\n            <p>\r\n              Please install a Web3 provider like{' '}\r\n              <a href=\"https://metamask.io/\">MetaMask</a> to use this app.\r\n            </p>\r\n          </>\r\n        ) : (\r\n          <div className=\"connected\">\r\n            {isConnected ? (\r\n              <>\r\n                <p>You are connected to a web3 provider.</p>\r\n                <p>Your current wallet address is {address}.</p>\r\n                <p style={{ color: \"red\" }}>WARNING: CURRENTLY IN BETA, ONLY WORKING ON KOVAN TESTNET</p>\r\n                <CallViewMethodButton\r\n                  name=\"Your balance\"\r\n                  onUpdate={getBalance}\r\n                  value={balance}\r\n                />\r\n\r\n                <button type=\"button\" onClick={mintNFT}>\r\n                  Offset your carbon footprint!\r\n                </button>\r\n\r\n                {hasPendingTransactions ? (\r\n                  <>\r\n                    <h1 className=\"pending\">Pending...</h1>\r\n                  </>) : (<> </>)}\r\n              </>\r\n            ) : (\r\n              <ConnectToMetamaskButton />\r\n            )}\r\n          </div>\r\n\r\n        )}\r\n\r\n      </div>\r\n      <div className=\"faqSection\">\r\n        <h1 className=\"faq\">Frequently Asked Questions</h1>\r\n        <h2 className=\"question\">What is this website?</h2>\r\n        <p className=\"answer\">Carbon Neutralized allows Ethereum users to take control of their carbon footprint. One of the biggest arguments against Ethereum is that it is environmentally unfriendly due to the mining process. Even though this will be mitigated with ETH 2.0, there is still many years of carbon emissions that Ethereum has been responsible for. By offseting your transaction, you can rest assured that you are carbon neutral and are helping to create a more sustainable blockchain</p>\r\n        <h2 className=\"question\">How does it work?</h2>\r\n        <p className=\"answer\">Carbon Neutralized takes advantage of two main technologies. First, it uses Universal Protocol's <a href=\"https://universalcarbon.com/\">UPC02 token</a>, which is a carbon credit based on the blockchain that represents one ton of carbon emissions. Second, it uses Uniswap in order to swap ETH to these tokens, and burn them so they are completely out of circulation. By doing this, you are effectively buying a carbon credit and using it to offset any emissions you may have caused through your transactions.</p>\r\n        <h2 className=\"question\">What is a carbon credit?</h2>\r\n        <p className=\"answer\">From Investopedia: A carbon credit is a permit that allows the company that holds it to emit a certain amount of carbon dioxide or other greenhouse gases. One credit permits the emission of a mass equal to one ton of carbon dioxide. <br></br>We are taking advantage of these credits to allow users to voluntary offset their carbon emissions</p>\r\n        <h2 className=\"question\">Where can I find the GitHub repo for this project?</h2>\r\n        <p className=\"answer\">Great question! It can be found <a href=\"https://github.com/murrlincoln/CarbonOffsetNFT\">here</a>.</p>\r\n      </div>\r\n    </main>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport default function useConnection() {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [address, setAddress] = useState(null);\r\n\r\n  // Update state variables from list of accounts\r\n  const handler = (accounts) => {\r\n    const connected = accounts && accounts.length > 0;\r\n    setIsConnected(connected);\r\n    if (connected) {\r\n      setAddress(accounts[0]);\r\n    } else {\r\n      setAddress(null);\r\n    }\r\n  };\r\n\r\n  // Initialize state variables\r\n  if (window.ethereum) {\r\n    window.ethereum\r\n    .request({\r\n      method: 'eth_accounts',\r\n    })\r\n    .then(handler);\r\n  }\r\n\r\n\r\n  // Event listener for when a user logs in/out or switches accounts\r\n  useEffect(() => {\r\n    if (window.ethereum)\r\n    window.ethereum.addListener('accountsChanged', handler);\r\n\r\n    return () => {\r\n      if (window.ethereum)\r\n      window.ethereum.removeListener('accountsChanged', handler);\r\n    };\r\n  }, []);\r\n\r\n  return { isConnected, address };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}